name: Approve version bump pull request

on:
  pull_request:
    types:
      - opened
      
jobs:
  
  branch_verification:
    name: Verify branch and only version.txt changed
    if: startsWith(github.head_ref, 'bump_version')
    runs-on: ubuntu-latest
    outputs:
      verification_passed: ${{ steps.compare.outputs.verification_passed }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Verify user
        id: check_user
        uses: actions-cool/check-user-permission@v2.2.0
        with:
          require: 'write'
      - name: Get diff of head to master
        id: get_diff
        uses: tj-actions/changed-files@v36
      - name: Compare diff
        id: compare
        if: |
          steps.get_diff.outputs.all_changed_files == 'version.txt' &&
          steps.check_user.outputs.check-result == 'true')
        run: |
          echo "verification_passed=true" >> $GITHUB_OUTPUT
          
  auto_approve:
    name: Auto approve PR from bump_version
    needs: branch_verification
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: needs.branch_verification.outputs.verification_passed == 'true'
    steps:
      - name: Auto approve
        uses: hmarr/auto-approve-action@v3
        with: 
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
  auto_merge:
    name: Auto merge after approval
    needs: [branch_verification, auto_approve]
    runs-on: ubuntu-latest
    if: needs.branch_verification.outputs.verification_passed == 'true'
    steps:
      - name: Auto merge
        uses: pascalgn/automerge-action@v0.15.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_METHOD: "merge"
          MERGE_LABELS: ""
          MERGE_DELETE_BRANCH: "true"
          
  auto_tag:
    name: Tag master
    needs: [branch_verification, auto_approve, auto_merge]
    runs-on: ubuntu-latest
    if: needs.branch_verification.outputs.verification_passed == 'true'
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          ref: master
          submodules: recursive
      - name: Read version file
        id: getversion
        run: |
          cd ${{runner.workspace}}/potku
          echo "version=$(cat version.txt)" >> $GITHUB_OUTPUT
      - name: git commands
        run: |
          cd ${{runner.workspace}}/potku
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git tag -a "${{ steps.getversion.outputs.version }}" -m "Automatic tag for version ${{ steps.getversion.outputs.version }}"
          git push origin "${{ steps.getversion.outputs.version }}"
    
